// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Practices.RecipeFramework.VisualStudio.Build
{
    using Microsoft.Build.Framework;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class GuidancePackageRegistryTemplate : GuidancePackageRegistryTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n[$RootKey$\\NewProjectTemplates\\TemplateDirs");
            
            #line 6 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}\\/1]\r\n@=\"");
            
            #line 7 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Caption));
            
            #line default
            #line hidden
            this.Write(@"""
""SortPriority""=dword:000000C8
""TemplatesDir""=""$PackageFolder$\Templates\Solutions.Cache""
""NewProjectDialogOnly""=dword:00000001
""Folder""=""{c72b8446-b872-4d94-bd13-b0891cbcb4ff}""
""Package""=""{77d93a80-73fc-40f8-87db-acd3482964b2}""
[$RootKey$\NewProjectTemplates\TemplateDirs");
            
            #line 13 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}\\/2]\r\n@=\"");
            
            #line 14 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Caption));
            
            #line default
            #line hidden
            this.Write("\"\r\n\"SortPriority\"=dword:000000C8\r\n\"TemplatesDir\"=\"$PackageFolder$\\Templates\\Proje" +
                    "cts.Cache\"\r\n\"Folder\"=\"{c72b8446-b872-4d94-bd13-b0891cbcb4ff}\"\r\n\"Package\"=\"{77d93" +
                    "a80-73fc-40f8-87db-acd3482964b2}\"\r\n");
            
            #line 19 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"

foreach(var projectFactory in this.AddItemsProjectFactories)
{

            
            #line default
            #line hidden
            this.Write("[$RootKey$\\Projects");
            
            #line 23 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\" + projectFactory.ToString("B")));
            
            #line default
            #line hidden
            this.Write("\\AddItemTemplates\\TemplateDirs");
            
            #line 23 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}\\/1]\r\n@=\"");
            
            #line 24 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Caption));
            
            #line default
            #line hidden
            this.Write("\"\r\n\"SortPriority\"=dword:00000064\r\n\"TemplatesDir\"=\"$PackageFolder$\\Templates\\Items" +
                    ".Cache\"\r\n");
            
            #line 27 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("[$RootKey$\\AutoLoadPackages\\{adfc4e64-0397-11d1-9f4e-00a0c911004f}\\Packages]\r\n[$R" +
                    "ootKey$\\AutoLoadPackages\\{adfc4e64-0397-11d1-9f4e-00a0c911004f}\\Packages");
            
            #line 31 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}]\r\n[$RootKey$\\AutoLoadPackages\\{f1536ef8-92ec-443c-9ed7-fdadf150da82}\\Packages]\r" +
                    "\n[$RootKey$\\AutoLoadPackages\\{f1536ef8-92ec-443c-9ed7-fdadf150da82}\\Packages");
            
            #line 33 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}]\r\n\r\n[$RootKey$\\Packages");
            
            #line 35 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}]\r\n@=\"");
            
            #line 36 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n[$RootKey$\\Packages");
            
            #line 37 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}\\SatelliteDll]\r\n\"Path\"=\"$PackageFolder$\"\r\n\"DllName\"=\"");
            
            #line 39 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SatelliteDllFile));
            
            #line default
            #line hidden
            this.Write("\"\r\n[$RootKey$\\Menus]\r\n\"{");
            
            #line 41 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}\"=\", 1000, 1\"\r\n[$RootKey$\\Languages\\CodeExpansions\\Basic\\Paths]\r\n");
            
            #line 43 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
 this.GenerateCodeExpansion("Basic"); 
            
            #line default
            #line hidden
            this.Write("[$RootKey$\\Languages\\CodeExpansions\\CSharp\\Paths]\r\n");
            
            #line 45 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
 this.GenerateCodeExpansion("CSharp"); 
            
            #line default
            #line hidden
            this.Write("[$RootKey$\\Languages\\CodeExpansions\\XML\\Paths]\r\n");
            
            #line 47 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
 this.GenerateCodeExpansion("XML"); 
            
            #line default
            #line hidden
            this.Write("[$RootKey$\\Packages\\{77d93a80-73fc-40f8-87db-acd3482964b2}\\Templates");
            
            #line 48 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\{" + this.GuidancePackage.Guid));
            
            #line default
            #line hidden
            this.Write("}]\r\n");
            
            #line 49 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
 
int index = 0;
foreach(var vsTemplate in this.VsTemplates) 
{

            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 54 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((++index).ToString()));
            
            #line default
            #line hidden
            this.Write("\"=\"$PackageFolder$");
            
            #line 54 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\\" + vsTemplate.ItemSpec));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 55 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\"LastTemplate\"=dword:");
            
            #line 58 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.ToString("D8")));
            
            #line default
            #line hidden
            this.Write("\r\n\"PackageName\"=\"");
            
            #line 59 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 61 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"

	internal Microsoft.Practices.RecipeFramework.Configuration.GuidancePackage GuidancePackage { get; set; }
	internal string SatelliteDllFile { get; set; }
	internal IEnumerable<ITaskItem> VsTemplates { get; set; }
	internal IEnumerable<Guid> AddItemsProjectFactories { get; set; }
	
	internal string OutputPath { get; set; }
 
	private void GenerateCodeExpansion(string language)
	{
		string path = "Snippets\\" + language + "\\" + this.GuidancePackage.Caption;
		if(System.IO.Directory.Exists(System.IO.Path.Combine(this.OutputPath, path)))
		{

        
        #line default
        #line hidden
        
        #line 74 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
this.Write("\"");

        
        #line default
        #line hidden
        
        #line 75 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(this.GuidancePackage.Caption));

        
        #line default
        #line hidden
        
        #line 75 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
this.Write("\"=\"$PackageFolder$");

        
        #line default
        #line hidden
        
        #line 75 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture("\\" + path));

        
        #line default
        #line hidden
        
        #line 75 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"
this.Write("\"\r\n");

        
        #line default
        #line hidden
        
        #line 76 "D:\GaxGat-VS2015\OpenGax\GAX\Src\VisualStudio\Package\Build\GuidancePackageRegistryTemplate.tt"

		}
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class GuidancePackageRegistryTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
